# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: start_recording.proto

import sys

_b = sys.version_info[0] < 3 and (lambda x: x) or (lambda x: x.encode("latin1"))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2

# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


DESCRIPTOR = _descriptor.FileDescriptor(
    name="start_recording.proto",
    package="start_recording",
    syntax="proto3",
    serialized_pb=_b(
        '\n\x15start_recording.proto\x12\x0fstart_recording":\n\x15StartRecordingRequest\x12\x0e\n\x06topics\x18\x01 \x01(\t\x12\x11\n\ttimestamp\x18\x02 \x01(\t"*\n\x16StartRecordingResponse\x12\x10\n\x08response\x18\x01 \x01(\t2r\n\x0eStartRecording\x12`\n\x0bSendMessage\x12&.start_recording.StartRecordingRequest\x1a\'.start_recording.StartRecordingResponse"\x00\x62\x06proto3'
    ),
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)


_STARTRECORDINGREQUEST = _descriptor.Descriptor(
    name="StartRecordingRequest",
    full_name="start_recording.StartRecordingRequest",
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name="topics",
            full_name="start_recording.StartRecordingRequest.topics",
            index=0,
            number=1,
            type=9,
            cpp_type=9,
            label=1,
            has_default_value=False,
            default_value=_b("").decode("utf-8"),
            message_type=None,
            enum_type=None,
            containing_type=None,
            is_extension=False,
            extension_scope=None,
            options=None,
        ),
        _descriptor.FieldDescriptor(
            name="timestamp",
            full_name="start_recording.StartRecordingRequest.timestamp",
            index=1,
            number=2,
            type=9,
            cpp_type=9,
            label=1,
            has_default_value=False,
            default_value=_b("").decode("utf-8"),
            message_type=None,
            enum_type=None,
            containing_type=None,
            is_extension=False,
            extension_scope=None,
            options=None,
        ),
    ],
    extensions=[],
    nested_types=[],
    enum_types=[],
    options=None,
    is_extendable=False,
    syntax="proto3",
    extension_ranges=[],
    oneofs=[],
    serialized_start=42,
    serialized_end=100,
)


_STARTRECORDINGRESPONSE = _descriptor.Descriptor(
    name="StartRecordingResponse",
    full_name="start_recording.StartRecordingResponse",
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name="response",
            full_name="start_recording.StartRecordingResponse.response",
            index=0,
            number=1,
            type=9,
            cpp_type=9,
            label=1,
            has_default_value=False,
            default_value=_b("").decode("utf-8"),
            message_type=None,
            enum_type=None,
            containing_type=None,
            is_extension=False,
            extension_scope=None,
            options=None,
        ),
    ],
    extensions=[],
    nested_types=[],
    enum_types=[],
    options=None,
    is_extendable=False,
    syntax="proto3",
    extension_ranges=[],
    oneofs=[],
    serialized_start=102,
    serialized_end=144,
)

DESCRIPTOR.message_types_by_name["StartRecordingRequest"] = _STARTRECORDINGREQUEST
DESCRIPTOR.message_types_by_name["StartRecordingResponse"] = _STARTRECORDINGRESPONSE

StartRecordingRequest = _reflection.GeneratedProtocolMessageType(
    "StartRecordingRequest",
    (_message.Message,),
    dict(
        DESCRIPTOR=_STARTRECORDINGREQUEST,
        __module__="start_recording_pb2",
        # @@protoc_insertion_point(class_scope:start_recording.StartRecordingRequest)
    ),
)
_sym_db.RegisterMessage(StartRecordingRequest)

StartRecordingResponse = _reflection.GeneratedProtocolMessageType(
    "StartRecordingResponse",
    (_message.Message,),
    dict(
        DESCRIPTOR=_STARTRECORDINGRESPONSE,
        __module__="start_recording_pb2",
        # @@protoc_insertion_point(class_scope:start_recording.StartRecordingResponse)
    ),
)
_sym_db.RegisterMessage(StartRecordingResponse)


try:
    # THESE ELEMENTS WILL BE DEPRECATED.
    # Please use the generated *_pb2_grpc.py files instead.
    import grpc
    from grpc.framework.common import cardinality
    from grpc.framework.interfaces.face import utilities as face_utilities
    from grpc.beta import implementations as beta_implementations
    from grpc.beta import interfaces as beta_interfaces

    class StartRecordingStub(object):

        def __init__(self, channel):
            """Constructor.

            Args:
              channel: A grpc.Channel.
            """
            self.SendMessage = channel.unary_unary(
                "/start_recording.StartRecording/SendMessage",
                request_serializer=StartRecordingRequest.SerializeToString,
                response_deserializer=StartRecordingResponse.FromString,
            )

    class StartRecordingServicer(object):

        def SendMessage(self, request, context):
            context.set_code(grpc.StatusCode.UNIMPLEMENTED)
            context.set_details("Method not implemented!")
            raise NotImplementedError("Method not implemented!")

    def add_StartRecordingServicer_to_server(servicer, server):
        rpc_method_handlers = {
            "SendMessage": grpc.unary_unary_rpc_method_handler(
                servicer.SendMessage,
                request_deserializer=StartRecordingRequest.FromString,
                response_serializer=StartRecordingResponse.SerializeToString,
            ),
        }
        generic_handler = grpc.method_handlers_generic_handler("start_recording.StartRecording", rpc_method_handlers)
        server.add_generic_rpc_handlers((generic_handler,))

    class BetaStartRecordingServicer(object):
        """The Beta API is deprecated for 0.15.0 and later.

        It is recommended to use the GA API (classes and functions in this
        file not marked beta) for all further purposes. This class was generated
        only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""

        def SendMessage(self, request, context):
            context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)

    class BetaStartRecordingStub(object):
        """The Beta API is deprecated for 0.15.0 and later.

        It is recommended to use the GA API (classes and functions in this
        file not marked beta) for all further purposes. This class was generated
        only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""

        def SendMessage(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
            raise NotImplementedError()

        SendMessage.future = None

    def beta_create_StartRecording_server(
        servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None
    ):
        """The Beta API is deprecated for 0.15.0 and later.

        It is recommended to use the GA API (classes and functions in this
        file not marked beta) for all further purposes. This function was
        generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
        request_deserializers = {
            ("start_recording.StartRecording", "SendMessage"): StartRecordingRequest.FromString,
        }
        response_serializers = {
            ("start_recording.StartRecording", "SendMessage"): StartRecordingResponse.SerializeToString,
        }
        method_implementations = {
            ("start_recording.StartRecording", "SendMessage"): face_utilities.unary_unary_inline(servicer.SendMessage),
        }
        server_options = beta_implementations.server_options(
            request_deserializers=request_deserializers,
            response_serializers=response_serializers,
            thread_pool=pool,
            thread_pool_size=pool_size,
            default_timeout=default_timeout,
            maximum_timeout=maximum_timeout,
        )
        return beta_implementations.server(method_implementations, options=server_options)

    def beta_create_StartRecording_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
        """The Beta API is deprecated for 0.15.0 and later.

        It is recommended to use the GA API (classes and functions in this
        file not marked beta) for all further purposes. This function was
        generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
        request_serializers = {
            ("start_recording.StartRecording", "SendMessage"): StartRecordingRequest.SerializeToString,
        }
        response_deserializers = {
            ("start_recording.StartRecording", "SendMessage"): StartRecordingResponse.FromString,
        }
        cardinalities = {
            "SendMessage": cardinality.Cardinality.UNARY_UNARY,
        }
        stub_options = beta_implementations.stub_options(
            host=host,
            metadata_transformer=metadata_transformer,
            request_serializers=request_serializers,
            response_deserializers=response_deserializers,
            thread_pool=pool,
            thread_pool_size=pool_size,
        )
        return beta_implementations.dynamic_stub(
            channel, "start_recording.StartRecording", cardinalities, options=stub_options
        )

except ImportError:
    pass
# @@protoc_insertion_point(module_scope)
