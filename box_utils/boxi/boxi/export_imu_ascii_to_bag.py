from datetime import datetime

import numpy as np
import rosbag
import rospy
import pandas as pd
import argparse
from box_utils import ColorLogger

logger = ColorLogger.get_logger()


class RAWIMUData:
    def __init__(self):
        self.raw_imu = None
        self.times = None
        self.expected_utc_offset = -18.0  # UTC time = GPS System Time + UTC offset
        self.expected_gps_offset = 0.0
        self.weeks_to_seconds = 604_800.0
        posix_start_in_utc = datetime(year=1970, month=1, day=1, hour=0, minute=0, second=0)
        gps_start_in_utc = datetime(year=1980, month=1, day=6, hour=0, minute=0, second=0)
        self.gps_epoch_start_in_POSIX_seconds = (gps_start_in_utc - posix_start_in_utc).total_seconds()

    def convert_times(self, imu_df: pd.DataFrame):
        """
        According to Novatel the UTC logged times are converted from the
        CPT7 recorded times through:
        UTC time = GPS reference time - offset + UTC offset
        https://docs.novatel.com/OEM7/Content/Logs/TIME.html
        """
        logger.info(imu_df.columns)
        EXPECTED_IMU_FIELDNAME = "%RAWIMUSXA"
        logger.info(f"Checking RAWIMU fieldnames...")
        if not (imu_df.iloc[:, 0] == EXPECTED_IMU_FIELDNAME).all():
            logger.error(f"Unexpected IMU message type."
                         f"\nExpected: {EXPECTED_IMU_FIELDNAME}"
                         f"\nGot: {imu_df.iloc[0, 0]}")
        else:
            logger.info(f"IMU field name {imu_df.iloc[0, 0]} is correct {ColorLogger.GREEN_CHECK}")
        WEEK_INDEX = 4
        SOW_INDEX = 5  # Seconds of week
        week = imu_df.iloc[:, WEEK_INDEX]
        seconds_of_week = imu_df.iloc[:, SOW_INDEX] - self.expected_gps_offset + self.expected_utc_offset
        seconds_since_gps_start_in_utc = week * self.weeks_to_seconds + seconds_of_week
        seconds_unix = seconds_since_gps_start_in_utc + self.gps_epoch_start_in_POSIX_seconds
        logger.info(f"seconds in unix {seconds_unix}")
        logger.info(datetime.utcfromtimestamp(seconds_unix[0]))

    def check_floating_point_diff(self, a, b, tolerance=1e-8):
        return np.abs(a - b) > tolerance

    def load_times(self, times_df: pd.DataFrame):
        logger.info(f"Checking that CPT7 recorded the expected time offsets...")
        UTC_OFFSET_INDEX = -8
        utc_offsets = times_df.iloc[:, UTC_OFFSET_INDEX]
        if self.check_floating_point_diff(utc_offsets.mean(), self.expected_utc_offset):
            logger.warning(f"{ColorLogger.YELLOW_WARNING} "
                           f"UTC offset of {utc_offsets.mean()} if different from expected.")
        else:
            logger.info(f"UTC offset is reasonable {ColorLogger.GREEN_CHECK}")

        GPS_SYSTEM_OFFSET_INDEX = 10  # GPS System Time = GPS reference time - offset.
        gps_offset = times_df.iloc[:, GPS_SYSTEM_OFFSET_INDEX]
        if self.check_floating_point_diff(gps_offset.mean(), self.expected_gps_offset):
            logger.warning(f"{ColorLogger.YELLOW_WARNING} "
                           f"GPS system offset {gps_offset.mean()} is different from expected")
        else:
            logger.info(f"GPS offset is reasonable {ColorLogger.GREEN_CHECK}")


def main(args):
    imu_path = args.imu_ascii_file
    times_path = args.time_ascii_file
    rawimu_df = fetch_dataframe_from_csv(imu_path)
    time_df = fetch_dataframe_from_csv(times_path)

    imu_data = RAWIMUData()
    imu_data.load_times(times_df=time_df)
    imu_data.convert_times(rawimu_df)


def fetch_dataframe_from_csv(input_path):
    logger.info(f"Processing {input_path}")
    df = None
    try:
        df = pd.read_csv(input_path)
    except FileNotFoundError as e:
        logger.error(f"File not found: {e}")
    except pd.errors.EmptyDataError as e:
        logger.error(f"Empty file: {e}")
    except pd.errors.ParserError as e:
        logger.error(f"Parsing error: {e}")
    except UnicodeDecodeError as e:
        logger.error(f"Encoding error: {e}")
    except Exception as e:
        logger.error(f"An unexpected error occurred: {e}")
    return df


if __name__ == "__main__":
    parser = argparse.ArgumentParser("Read RAWIMUSXA IMU.ASCII file generated by Novatel Convert,"
                                     " and write to ROSBAG")
    parser.add_argument("--imu_ascii_file", "-i", help="Path to the ascii csv file with RAWIMUSXA messages",
                        required=True)
    parser.add_argument("--time_ascii_file", "-t", help="Path to the ascii csv file with RAWIMUSXA messages",
                        required=True)
    parser.add_argument("--output", "-o", help="Output bag path", default="./raw_imu_output.bag")
    args = parser.parse_args()
    main(args=args)
